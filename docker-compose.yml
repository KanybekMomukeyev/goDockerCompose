store:
  # data-only container
  restart: always
  image: postgres:latest # reuse postgres container
  volumes:
      - /var/lib/postgresql/data
  command: "true"

#s3minio:
#    image: minio/minio
#    ports:
#      - "9000:9000"
#    volumes:
#      - "./kanoexport:/export"
#    environment:
#      - "MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE"
#      - "MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
#    command: server /export

postgres:
  restart: always
  image: postgres:latest
  ports:
      - "5432" # random available host port will be chosen, same as -P
  volumes_from:
      - store # connect postgres and the data-only container
  environment:
      - POSTGRES_PASSWORD=nazgulum
      - POSTGRES_USER=kanybek
      - POSTGRES_DATABASENAME=databasename
      # you can also set the postgres username and database name
goapi:
  restart: always
  build: ./api
  ports:
          - "8080" # this is port i'm exposing in the container
#  ports:
#    - 8080:8080
  links:
    - postgres:db
##  environment:
##    - DB_NAME=project
##  volumes:
##        - ./api:/go/src/github.com/KanybekMomukeyev/goDockerCompose/api

go:
  restart: always
  build: ./grpc
  ports:
    - 50051:50051
  links:
    - postgres:db

printserver:
  restart: always
  build: ./printserver
  ports:
          - "8100" # this is port i'm exposing in the container

#proxy:
#    image: nginx:latest
#    ports:
#        - "80:80" # host:container
#        - "443:443"
#    volumes:
#        - ./nginx.conf:/etc/nginx/nginx.conf:ro
#        # connect host's ./nginx.conf with container's nginx.conf
#        # :ro == read only perms in container
#    links:
#        - goapi:app # [other container]:[alias in this container]
#          # creates environment variables in proxy container
#          # with ip and port info for go container
#          # also creates entries in /etc/hosts with ip info
#
