// Code generated by protoc-gen-go.
// source: customer.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	customer.proto

It has these top-level messages:
	AllProductsResponse
	AllCustomersResponse
	AllSuppliersResponse
	AllStaffResponse
	AllCategoryResponse
	AllOrderResponse
	AllOrderDetailResponse
	AllTransactionResponse
	StickyNoteRequest
	StickyNoteResponse
	ExampleRequest
	ExampleResponse
	ExampleFilter
	CreateProductRequest
	CreateCustomerRequest
	CreateSupplierRequest
	StaffRequest
	StaffFilter
	RoleRequest
	ProductRequest
	ProductFilter
	CategoryRequest
	CategoryFilter
	CustomerRequest
	CustomerFilter
	SupplierRequest
	SupplierFilter
	AccountRequest
	AccountFilter
	OrderRequest
	OrderFilter
	PaymentRequest
	PaymentFilter
	OrderDetailRequest
	OrderDetailFilter
	TransactionRequest
	TransactionFilter
	SignInRequest
	CreateOrderRequest
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message for creating a new customer
type AllProductsResponse struct {
	ProductRequest []*CreateProductRequest `protobuf:"bytes,1,rep,name=productRequest" json:"productRequest,omitempty"`
}

func (m *AllProductsResponse) Reset()                    { *m = AllProductsResponse{} }
func (m *AllProductsResponse) String() string            { return proto1.CompactTextString(m) }
func (*AllProductsResponse) ProtoMessage()               {}
func (*AllProductsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AllProductsResponse) GetProductRequest() []*CreateProductRequest {
	if m != nil {
		return m.ProductRequest
	}
	return nil
}

type AllCustomersResponse struct {
	CustomerRequest []*CreateCustomerRequest `protobuf:"bytes,1,rep,name=customerRequest" json:"customerRequest,omitempty"`
}

func (m *AllCustomersResponse) Reset()                    { *m = AllCustomersResponse{} }
func (m *AllCustomersResponse) String() string            { return proto1.CompactTextString(m) }
func (*AllCustomersResponse) ProtoMessage()               {}
func (*AllCustomersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AllCustomersResponse) GetCustomerRequest() []*CreateCustomerRequest {
	if m != nil {
		return m.CustomerRequest
	}
	return nil
}

type AllSuppliersResponse struct {
	SupplierRequest []*CreateSupplierRequest `protobuf:"bytes,1,rep,name=supplierRequest" json:"supplierRequest,omitempty"`
}

func (m *AllSuppliersResponse) Reset()                    { *m = AllSuppliersResponse{} }
func (m *AllSuppliersResponse) String() string            { return proto1.CompactTextString(m) }
func (*AllSuppliersResponse) ProtoMessage()               {}
func (*AllSuppliersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AllSuppliersResponse) GetSupplierRequest() []*CreateSupplierRequest {
	if m != nil {
		return m.SupplierRequest
	}
	return nil
}

type AllStaffResponse struct {
	StaffRequest []*StaffRequest `protobuf:"bytes,1,rep,name=staffRequest" json:"staffRequest,omitempty"`
}

func (m *AllStaffResponse) Reset()                    { *m = AllStaffResponse{} }
func (m *AllStaffResponse) String() string            { return proto1.CompactTextString(m) }
func (*AllStaffResponse) ProtoMessage()               {}
func (*AllStaffResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AllStaffResponse) GetStaffRequest() []*StaffRequest {
	if m != nil {
		return m.StaffRequest
	}
	return nil
}

type AllCategoryResponse struct {
	CategoryRequest []*CategoryRequest `protobuf:"bytes,1,rep,name=categoryRequest" json:"categoryRequest,omitempty"`
}

func (m *AllCategoryResponse) Reset()                    { *m = AllCategoryResponse{} }
func (m *AllCategoryResponse) String() string            { return proto1.CompactTextString(m) }
func (*AllCategoryResponse) ProtoMessage()               {}
func (*AllCategoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AllCategoryResponse) GetCategoryRequest() []*CategoryRequest {
	if m != nil {
		return m.CategoryRequest
	}
	return nil
}

type AllOrderResponse struct {
	OrderRequest []*CreateOrderRequest `protobuf:"bytes,1,rep,name=orderRequest" json:"orderRequest,omitempty"`
}

func (m *AllOrderResponse) Reset()                    { *m = AllOrderResponse{} }
func (m *AllOrderResponse) String() string            { return proto1.CompactTextString(m) }
func (*AllOrderResponse) ProtoMessage()               {}
func (*AllOrderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AllOrderResponse) GetOrderRequest() []*CreateOrderRequest {
	if m != nil {
		return m.OrderRequest
	}
	return nil
}

type AllOrderDetailResponse struct {
	OrderDetailRequest []*OrderDetailRequest `protobuf:"bytes,1,rep,name=orderDetailRequest" json:"orderDetailRequest,omitempty"`
}

func (m *AllOrderDetailResponse) Reset()                    { *m = AllOrderDetailResponse{} }
func (m *AllOrderDetailResponse) String() string            { return proto1.CompactTextString(m) }
func (*AllOrderDetailResponse) ProtoMessage()               {}
func (*AllOrderDetailResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AllOrderDetailResponse) GetOrderDetailRequest() []*OrderDetailRequest {
	if m != nil {
		return m.OrderDetailRequest
	}
	return nil
}

type AllTransactionResponse struct {
	TransactionRequest []*TransactionRequest `protobuf:"bytes,1,rep,name=transactionRequest" json:"transactionRequest,omitempty"`
}

func (m *AllTransactionResponse) Reset()                    { *m = AllTransactionResponse{} }
func (m *AllTransactionResponse) String() string            { return proto1.CompactTextString(m) }
func (*AllTransactionResponse) ProtoMessage()               {}
func (*AllTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AllTransactionResponse) GetTransactionRequest() []*TransactionRequest {
	if m != nil {
		return m.TransactionRequest
	}
	return nil
}

type StickyNoteRequest struct {
	Message      string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	RequestImage []byte `protobuf:"bytes,2,opt,name=requestImage,proto3" json:"requestImage,omitempty"`
}

func (m *StickyNoteRequest) Reset()                    { *m = StickyNoteRequest{} }
func (m *StickyNoteRequest) String() string            { return proto1.CompactTextString(m) }
func (*StickyNoteRequest) ProtoMessage()               {}
func (*StickyNoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StickyNoteRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *StickyNoteRequest) GetRequestImage() []byte {
	if m != nil {
		return m.RequestImage
	}
	return nil
}

type StickyNoteResponse struct {
	Message       string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	ResponseImage []byte `protobuf:"bytes,2,opt,name=responseImage,proto3" json:"responseImage,omitempty"`
}

func (m *StickyNoteResponse) Reset()                    { *m = StickyNoteResponse{} }
func (m *StickyNoteResponse) String() string            { return proto1.CompactTextString(m) }
func (*StickyNoteResponse) ProtoMessage()               {}
func (*StickyNoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StickyNoteResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *StickyNoteResponse) GetResponseImage() []byte {
	if m != nil {
		return m.ResponseImage
	}
	return nil
}

type ExampleRequest struct {
	Id        uint64                    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string                    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email     string                    `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phone     string                    `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	Addresses []*ExampleRequest_Address `protobuf:"bytes,5,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *ExampleRequest) Reset()                    { *m = ExampleRequest{} }
func (m *ExampleRequest) String() string            { return proto1.CompactTextString(m) }
func (*ExampleRequest) ProtoMessage()               {}
func (*ExampleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ExampleRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ExampleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExampleRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ExampleRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ExampleRequest) GetAddresses() []*ExampleRequest_Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type ExampleRequest_Address struct {
	Street            string `protobuf:"bytes,1,opt,name=street" json:"street,omitempty"`
	City              string `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	State             string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Zip               string `protobuf:"bytes,4,opt,name=zip" json:"zip,omitempty"`
	IsShippingAddress bool   `protobuf:"varint,5,opt,name=isShippingAddress" json:"isShippingAddress,omitempty"`
}

func (m *ExampleRequest_Address) Reset()                    { *m = ExampleRequest_Address{} }
func (m *ExampleRequest_Address) String() string            { return proto1.CompactTextString(m) }
func (*ExampleRequest_Address) ProtoMessage()               {}
func (*ExampleRequest_Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

func (m *ExampleRequest_Address) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *ExampleRequest_Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *ExampleRequest_Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ExampleRequest_Address) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

func (m *ExampleRequest_Address) GetIsShippingAddress() bool {
	if m != nil {
		return m.IsShippingAddress
	}
	return false
}

type ExampleResponse struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *ExampleResponse) Reset()                    { *m = ExampleResponse{} }
func (m *ExampleResponse) String() string            { return proto1.CompactTextString(m) }
func (*ExampleResponse) ProtoMessage()               {}
func (*ExampleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ExampleResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ExampleResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ExampleFilter struct {
	Keyword string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
}

func (m *ExampleFilter) Reset()                    { *m = ExampleFilter{} }
func (m *ExampleFilter) String() string            { return proto1.CompactTextString(m) }
func (*ExampleFilter) ProtoMessage()               {}
func (*ExampleFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ExampleFilter) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

type CreateProductRequest struct {
	Product     *ProductRequest     `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	OrderDetail *OrderDetailRequest `protobuf:"bytes,2,opt,name=orderDetail" json:"orderDetail,omitempty"`
}

func (m *CreateProductRequest) Reset()                    { *m = CreateProductRequest{} }
func (m *CreateProductRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateProductRequest) ProtoMessage()               {}
func (*CreateProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateProductRequest) GetProduct() *ProductRequest {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *CreateProductRequest) GetOrderDetail() *OrderDetailRequest {
	if m != nil {
		return m.OrderDetail
	}
	return nil
}

type CreateCustomerRequest struct {
	Customer    *CustomerRequest    `protobuf:"bytes,1,opt,name=customer" json:"customer,omitempty"`
	Transaction *TransactionRequest `protobuf:"bytes,2,opt,name=transaction" json:"transaction,omitempty"`
	Account     *AccountRequest     `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
}

func (m *CreateCustomerRequest) Reset()                    { *m = CreateCustomerRequest{} }
func (m *CreateCustomerRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateCustomerRequest) ProtoMessage()               {}
func (*CreateCustomerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CreateCustomerRequest) GetCustomer() *CustomerRequest {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *CreateCustomerRequest) GetTransaction() *TransactionRequest {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *CreateCustomerRequest) GetAccount() *AccountRequest {
	if m != nil {
		return m.Account
	}
	return nil
}

type CreateSupplierRequest struct {
	Supplier    *SupplierRequest    `protobuf:"bytes,1,opt,name=supplier" json:"supplier,omitempty"`
	Transaction *TransactionRequest `protobuf:"bytes,2,opt,name=transaction" json:"transaction,omitempty"`
	Account     *AccountRequest     `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
}

func (m *CreateSupplierRequest) Reset()                    { *m = CreateSupplierRequest{} }
func (m *CreateSupplierRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateSupplierRequest) ProtoMessage()               {}
func (*CreateSupplierRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CreateSupplierRequest) GetSupplier() *SupplierRequest {
	if m != nil {
		return m.Supplier
	}
	return nil
}

func (m *CreateSupplierRequest) GetTransaction() *TransactionRequest {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *CreateSupplierRequest) GetAccount() *AccountRequest {
	if m != nil {
		return m.Account
	}
	return nil
}

// static objects
type StaffRequest struct {
	StaffId        uint64 `protobuf:"varint,1,opt,name=staffId" json:"staffId,omitempty"`
	RoleId         uint64 `protobuf:"varint,2,opt,name=roleId" json:"roleId,omitempty"`
	StaffImagePath string `protobuf:"bytes,3,opt,name=staffImagePath" json:"staffImagePath,omitempty"`
	FirstName      string `protobuf:"bytes,4,opt,name=firstName" json:"firstName,omitempty"`
	SecondName     string `protobuf:"bytes,5,opt,name=secondName" json:"secondName,omitempty"`
	Email          string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	Password       string `protobuf:"bytes,7,opt,name=password" json:"password,omitempty"`
	PhoneNumber    string `protobuf:"bytes,8,opt,name=phoneNumber" json:"phoneNumber,omitempty"`
	Address        string `protobuf:"bytes,9,opt,name=address" json:"address,omitempty"`
	StaffUpdatedAt uint64 `protobuf:"varint,10,opt,name=staffUpdatedAt" json:"staffUpdatedAt,omitempty"`
}

func (m *StaffRequest) Reset()                    { *m = StaffRequest{} }
func (m *StaffRequest) String() string            { return proto1.CompactTextString(m) }
func (*StaffRequest) ProtoMessage()               {}
func (*StaffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *StaffRequest) GetStaffId() uint64 {
	if m != nil {
		return m.StaffId
	}
	return 0
}

func (m *StaffRequest) GetRoleId() uint64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *StaffRequest) GetStaffImagePath() string {
	if m != nil {
		return m.StaffImagePath
	}
	return ""
}

func (m *StaffRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *StaffRequest) GetSecondName() string {
	if m != nil {
		return m.SecondName
	}
	return ""
}

func (m *StaffRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *StaffRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *StaffRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *StaffRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StaffRequest) GetStaffUpdatedAt() uint64 {
	if m != nil {
		return m.StaffUpdatedAt
	}
	return 0
}

type StaffFilter struct {
	StaffKeyword   string `protobuf:"bytes,1,opt,name=staffKeyword" json:"staffKeyword,omitempty"`
	StaffUpdatedAt uint64 `protobuf:"varint,2,opt,name=staffUpdatedAt" json:"staffUpdatedAt,omitempty"`
}

func (m *StaffFilter) Reset()                    { *m = StaffFilter{} }
func (m *StaffFilter) String() string            { return proto1.CompactTextString(m) }
func (*StaffFilter) ProtoMessage()               {}
func (*StaffFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *StaffFilter) GetStaffKeyword() string {
	if m != nil {
		return m.StaffKeyword
	}
	return ""
}

func (m *StaffFilter) GetStaffUpdatedAt() uint64 {
	if m != nil {
		return m.StaffUpdatedAt
	}
	return 0
}

type RoleRequest struct {
	RoleId   uint64 `protobuf:"varint,1,opt,name=roleId" json:"roleId,omitempty"`
	RoleName string `protobuf:"bytes,2,opt,name=roleName" json:"roleName,omitempty"`
}

func (m *RoleRequest) Reset()                    { *m = RoleRequest{} }
func (m *RoleRequest) String() string            { return proto1.CompactTextString(m) }
func (*RoleRequest) ProtoMessage()               {}
func (*RoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *RoleRequest) GetRoleId() uint64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *RoleRequest) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

type ProductRequest struct {
	ProductId        uint64  `protobuf:"varint,1,opt,name=productId" json:"productId,omitempty"`
	ProductImagePath string  `protobuf:"bytes,2,opt,name=productImagePath" json:"productImagePath,omitempty"`
	ProductName      string  `protobuf:"bytes,3,opt,name=productName" json:"productName,omitempty"`
	SupplierId       uint64  `protobuf:"varint,4,opt,name=supplierId" json:"supplierId,omitempty"`
	CategoryId       uint64  `protobuf:"varint,5,opt,name=categoryId" json:"categoryId,omitempty"`
	Barcode          string  `protobuf:"bytes,6,opt,name=barcode" json:"barcode,omitempty"`
	QuantityPerUnit  string  `protobuf:"bytes,7,opt,name=quantityPerUnit" json:"quantityPerUnit,omitempty"`
	SaleUnitPrice    float64 `protobuf:"fixed64,8,opt,name=saleUnitPrice" json:"saleUnitPrice,omitempty"`
	IncomeUnitPrice  float64 `protobuf:"fixed64,9,opt,name=incomeUnitPrice" json:"incomeUnitPrice,omitempty"`
	UnitsInStock     float64 `protobuf:"fixed64,10,opt,name=unitsInStock" json:"unitsInStock,omitempty"`
	ProductUpdatedAt uint64  `protobuf:"varint,11,opt,name=productUpdatedAt" json:"productUpdatedAt,omitempty"`
}

func (m *ProductRequest) Reset()                    { *m = ProductRequest{} }
func (m *ProductRequest) String() string            { return proto1.CompactTextString(m) }
func (*ProductRequest) ProtoMessage()               {}
func (*ProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ProductRequest) GetProductId() uint64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *ProductRequest) GetProductImagePath() string {
	if m != nil {
		return m.ProductImagePath
	}
	return ""
}

func (m *ProductRequest) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *ProductRequest) GetSupplierId() uint64 {
	if m != nil {
		return m.SupplierId
	}
	return 0
}

func (m *ProductRequest) GetCategoryId() uint64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *ProductRequest) GetBarcode() string {
	if m != nil {
		return m.Barcode
	}
	return ""
}

func (m *ProductRequest) GetQuantityPerUnit() string {
	if m != nil {
		return m.QuantityPerUnit
	}
	return ""
}

func (m *ProductRequest) GetSaleUnitPrice() float64 {
	if m != nil {
		return m.SaleUnitPrice
	}
	return 0
}

func (m *ProductRequest) GetIncomeUnitPrice() float64 {
	if m != nil {
		return m.IncomeUnitPrice
	}
	return 0
}

func (m *ProductRequest) GetUnitsInStock() float64 {
	if m != nil {
		return m.UnitsInStock
	}
	return 0
}

func (m *ProductRequest) GetProductUpdatedAt() uint64 {
	if m != nil {
		return m.ProductUpdatedAt
	}
	return 0
}

type ProductFilter struct {
	ProductKeyword   string `protobuf:"bytes,1,opt,name=productKeyword" json:"productKeyword,omitempty"`
	ProductUpdatedAt uint64 `protobuf:"varint,2,opt,name=productUpdatedAt" json:"productUpdatedAt,omitempty"`
}

func (m *ProductFilter) Reset()                    { *m = ProductFilter{} }
func (m *ProductFilter) String() string            { return proto1.CompactTextString(m) }
func (*ProductFilter) ProtoMessage()               {}
func (*ProductFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ProductFilter) GetProductKeyword() string {
	if m != nil {
		return m.ProductKeyword
	}
	return ""
}

func (m *ProductFilter) GetProductUpdatedAt() uint64 {
	if m != nil {
		return m.ProductUpdatedAt
	}
	return 0
}

type CategoryRequest struct {
	CategoryId        uint64 `protobuf:"varint,1,opt,name=categoryId" json:"categoryId,omitempty"`
	CategoryName      string `protobuf:"bytes,2,opt,name=categoryName" json:"categoryName,omitempty"`
	CategoryUpdatedAt uint64 `protobuf:"varint,3,opt,name=categoryUpdatedAt" json:"categoryUpdatedAt,omitempty"`
}

func (m *CategoryRequest) Reset()                    { *m = CategoryRequest{} }
func (m *CategoryRequest) String() string            { return proto1.CompactTextString(m) }
func (*CategoryRequest) ProtoMessage()               {}
func (*CategoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CategoryRequest) GetCategoryId() uint64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *CategoryRequest) GetCategoryName() string {
	if m != nil {
		return m.CategoryName
	}
	return ""
}

func (m *CategoryRequest) GetCategoryUpdatedAt() uint64 {
	if m != nil {
		return m.CategoryUpdatedAt
	}
	return 0
}

type CategoryFilter struct {
	CategoryKeyword   string `protobuf:"bytes,1,opt,name=categoryKeyword" json:"categoryKeyword,omitempty"`
	CategoryUpdatedAt uint64 `protobuf:"varint,2,opt,name=categoryUpdatedAt" json:"categoryUpdatedAt,omitempty"`
}

func (m *CategoryFilter) Reset()                    { *m = CategoryFilter{} }
func (m *CategoryFilter) String() string            { return proto1.CompactTextString(m) }
func (*CategoryFilter) ProtoMessage()               {}
func (*CategoryFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CategoryFilter) GetCategoryKeyword() string {
	if m != nil {
		return m.CategoryKeyword
	}
	return ""
}

func (m *CategoryFilter) GetCategoryUpdatedAt() uint64 {
	if m != nil {
		return m.CategoryUpdatedAt
	}
	return 0
}

type CustomerRequest struct {
	CustomerId        uint64 `protobuf:"varint,1,opt,name=customerId" json:"customerId,omitempty"`
	CustomerImagePath string `protobuf:"bytes,2,opt,name=customerImagePath" json:"customerImagePath,omitempty"`
	FirstName         string `protobuf:"bytes,3,opt,name=firstName" json:"firstName,omitempty"`
	SecondName        string `protobuf:"bytes,4,opt,name=secondName" json:"secondName,omitempty"`
	PhoneNumber       string `protobuf:"bytes,5,opt,name=phoneNumber" json:"phoneNumber,omitempty"`
	Address           string `protobuf:"bytes,6,opt,name=address" json:"address,omitempty"`
	StaffId           uint64 `protobuf:"varint,7,opt,name=staffId" json:"staffId,omitempty"`
	CustomerUpdatedAt uint64 `protobuf:"varint,8,opt,name=customerUpdatedAt" json:"customerUpdatedAt,omitempty"`
}

func (m *CustomerRequest) Reset()                    { *m = CustomerRequest{} }
func (m *CustomerRequest) String() string            { return proto1.CompactTextString(m) }
func (*CustomerRequest) ProtoMessage()               {}
func (*CustomerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CustomerRequest) GetCustomerId() uint64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *CustomerRequest) GetCustomerImagePath() string {
	if m != nil {
		return m.CustomerImagePath
	}
	return ""
}

func (m *CustomerRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CustomerRequest) GetSecondName() string {
	if m != nil {
		return m.SecondName
	}
	return ""
}

func (m *CustomerRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *CustomerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CustomerRequest) GetStaffId() uint64 {
	if m != nil {
		return m.StaffId
	}
	return 0
}

func (m *CustomerRequest) GetCustomerUpdatedAt() uint64 {
	if m != nil {
		return m.CustomerUpdatedAt
	}
	return 0
}

type CustomerFilter struct {
	CustomerKeyword   string `protobuf:"bytes,1,opt,name=customerKeyword" json:"customerKeyword,omitempty"`
	CustomerUpdatedAt uint64 `protobuf:"varint,2,opt,name=customerUpdatedAt" json:"customerUpdatedAt,omitempty"`
}

func (m *CustomerFilter) Reset()                    { *m = CustomerFilter{} }
func (m *CustomerFilter) String() string            { return proto1.CompactTextString(m) }
func (*CustomerFilter) ProtoMessage()               {}
func (*CustomerFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CustomerFilter) GetCustomerKeyword() string {
	if m != nil {
		return m.CustomerKeyword
	}
	return ""
}

func (m *CustomerFilter) GetCustomerUpdatedAt() uint64 {
	if m != nil {
		return m.CustomerUpdatedAt
	}
	return 0
}

type SupplierRequest struct {
	SupplierId        uint64 `protobuf:"varint,1,opt,name=supplierId" json:"supplierId,omitempty"`
	SupplierImagePath string `protobuf:"bytes,2,opt,name=supplierImagePath" json:"supplierImagePath,omitempty"`
	CompanyName       string `protobuf:"bytes,3,opt,name=companyName" json:"companyName,omitempty"`
	ContactFname      string `protobuf:"bytes,4,opt,name=contactFname" json:"contactFname,omitempty"`
	PhoneNumber       string `protobuf:"bytes,5,opt,name=phoneNumber" json:"phoneNumber,omitempty"`
	Address           string `protobuf:"bytes,6,opt,name=address" json:"address,omitempty"`
	SupplierUpdatedAt uint64 `protobuf:"varint,7,opt,name=supplierUpdatedAt" json:"supplierUpdatedAt,omitempty"`
}

func (m *SupplierRequest) Reset()                    { *m = SupplierRequest{} }
func (m *SupplierRequest) String() string            { return proto1.CompactTextString(m) }
func (*SupplierRequest) ProtoMessage()               {}
func (*SupplierRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *SupplierRequest) GetSupplierId() uint64 {
	if m != nil {
		return m.SupplierId
	}
	return 0
}

func (m *SupplierRequest) GetSupplierImagePath() string {
	if m != nil {
		return m.SupplierImagePath
	}
	return ""
}

func (m *SupplierRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *SupplierRequest) GetContactFname() string {
	if m != nil {
		return m.ContactFname
	}
	return ""
}

func (m *SupplierRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *SupplierRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SupplierRequest) GetSupplierUpdatedAt() uint64 {
	if m != nil {
		return m.SupplierUpdatedAt
	}
	return 0
}

type SupplierFilter struct {
	SupplierKeyword   string `protobuf:"bytes,1,opt,name=supplierKeyword" json:"supplierKeyword,omitempty"`
	SupplierUpdatedAt uint64 `protobuf:"varint,2,opt,name=supplierUpdatedAt" json:"supplierUpdatedAt,omitempty"`
}

func (m *SupplierFilter) Reset()                    { *m = SupplierFilter{} }
func (m *SupplierFilter) String() string            { return proto1.CompactTextString(m) }
func (*SupplierFilter) ProtoMessage()               {}
func (*SupplierFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *SupplierFilter) GetSupplierKeyword() string {
	if m != nil {
		return m.SupplierKeyword
	}
	return ""
}

func (m *SupplierFilter) GetSupplierUpdatedAt() uint64 {
	if m != nil {
		return m.SupplierUpdatedAt
	}
	return 0
}

type AccountRequest struct {
	AccountId  uint64  `protobuf:"varint,1,opt,name=accountId" json:"accountId,omitempty"`
	CustomerId uint64  `protobuf:"varint,2,opt,name=customerId" json:"customerId,omitempty"`
	SupplierId uint64  `protobuf:"varint,3,opt,name=supplierId" json:"supplierId,omitempty"`
	Balance    float64 `protobuf:"fixed64,4,opt,name=balance" json:"balance,omitempty"`
}

func (m *AccountRequest) Reset()                    { *m = AccountRequest{} }
func (m *AccountRequest) String() string            { return proto1.CompactTextString(m) }
func (*AccountRequest) ProtoMessage()               {}
func (*AccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *AccountRequest) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *AccountRequest) GetCustomerId() uint64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *AccountRequest) GetSupplierId() uint64 {
	if m != nil {
		return m.SupplierId
	}
	return 0
}

func (m *AccountRequest) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type AccountFilter struct {
	AccountKeyword string `protobuf:"bytes,1,opt,name=accountKeyword" json:"accountKeyword,omitempty"`
}

func (m *AccountFilter) Reset()                    { *m = AccountFilter{} }
func (m *AccountFilter) String() string            { return proto1.CompactTextString(m) }
func (*AccountFilter) ProtoMessage()               {}
func (*AccountFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *AccountFilter) GetAccountKeyword() string {
	if m != nil {
		return m.AccountKeyword
	}
	return ""
}

// static objects
type OrderRequest struct {
	OrderId           uint64 `protobuf:"varint,1,opt,name=orderId" json:"orderId,omitempty"`
	OrderDocument     uint32 `protobuf:"varint,2,opt,name=orderDocument" json:"orderDocument,omitempty"`
	MoneyMovementType uint32 `protobuf:"varint,3,opt,name=moneyMovementType" json:"moneyMovementType,omitempty"`
	BillingNo         string `protobuf:"bytes,4,opt,name=billingNo" json:"billingNo,omitempty"`
	StaffId           uint64 `protobuf:"varint,5,opt,name=staffId" json:"staffId,omitempty"`
	CustomerId        uint64 `protobuf:"varint,6,opt,name=customerId" json:"customerId,omitempty"`
	SupplierId        uint64 `protobuf:"varint,7,opt,name=supplierId" json:"supplierId,omitempty"`
	OrderDate         uint64 `protobuf:"varint,8,opt,name=orderDate" json:"orderDate,omitempty"`
	PaymentId         uint64 `protobuf:"varint,9,opt,name=paymentId" json:"paymentId,omitempty"`
	ErrorMsg          string `protobuf:"bytes,10,opt,name=errorMsg" json:"errorMsg,omitempty"`
	Comment           string `protobuf:"bytes,11,opt,name=comment" json:"comment,omitempty"`
	IsDeleted         uint32 `protobuf:"varint,12,opt,name=isDeleted" json:"isDeleted,omitempty"`
	IsPaid            uint32 `protobuf:"varint,13,opt,name=isPaid" json:"isPaid,omitempty"`
	IsEdited          uint32 `protobuf:"varint,14,opt,name=isEdited" json:"isEdited,omitempty"`
	OrderUpdatedAt    uint64 `protobuf:"varint,15,opt,name=orderUpdatedAt" json:"orderUpdatedAt,omitempty"`
}

func (m *OrderRequest) Reset()                    { *m = OrderRequest{} }
func (m *OrderRequest) String() string            { return proto1.CompactTextString(m) }
func (*OrderRequest) ProtoMessage()               {}
func (*OrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *OrderRequest) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *OrderRequest) GetOrderDocument() uint32 {
	if m != nil {
		return m.OrderDocument
	}
	return 0
}

func (m *OrderRequest) GetMoneyMovementType() uint32 {
	if m != nil {
		return m.MoneyMovementType
	}
	return 0
}

func (m *OrderRequest) GetBillingNo() string {
	if m != nil {
		return m.BillingNo
	}
	return ""
}

func (m *OrderRequest) GetStaffId() uint64 {
	if m != nil {
		return m.StaffId
	}
	return 0
}

func (m *OrderRequest) GetCustomerId() uint64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *OrderRequest) GetSupplierId() uint64 {
	if m != nil {
		return m.SupplierId
	}
	return 0
}

func (m *OrderRequest) GetOrderDate() uint64 {
	if m != nil {
		return m.OrderDate
	}
	return 0
}

func (m *OrderRequest) GetPaymentId() uint64 {
	if m != nil {
		return m.PaymentId
	}
	return 0
}

func (m *OrderRequest) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *OrderRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *OrderRequest) GetIsDeleted() uint32 {
	if m != nil {
		return m.IsDeleted
	}
	return 0
}

func (m *OrderRequest) GetIsPaid() uint32 {
	if m != nil {
		return m.IsPaid
	}
	return 0
}

func (m *OrderRequest) GetIsEdited() uint32 {
	if m != nil {
		return m.IsEdited
	}
	return 0
}

func (m *OrderRequest) GetOrderUpdatedAt() uint64 {
	if m != nil {
		return m.OrderUpdatedAt
	}
	return 0
}

type OrderFilter struct {
	OrderKeyword string `protobuf:"bytes,1,opt,name=orderKeyword" json:"orderKeyword,omitempty"`
	OrderDate    uint64 `protobuf:"varint,2,opt,name=orderDate" json:"orderDate,omitempty"`
	Limit        uint32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *OrderFilter) Reset()                    { *m = OrderFilter{} }
func (m *OrderFilter) String() string            { return proto1.CompactTextString(m) }
func (*OrderFilter) ProtoMessage()               {}
func (*OrderFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *OrderFilter) GetOrderKeyword() string {
	if m != nil {
		return m.OrderKeyword
	}
	return ""
}

func (m *OrderFilter) GetOrderDate() uint64 {
	if m != nil {
		return m.OrderDate
	}
	return 0
}

func (m *OrderFilter) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type PaymentRequest struct {
	PaymentId              uint64  `protobuf:"varint,1,opt,name=paymentId" json:"paymentId,omitempty"`
	TotalOrderPrice        float64 `protobuf:"fixed64,2,opt,name=totalOrderPrice" json:"totalOrderPrice,omitempty"`
	Discount               float64 `protobuf:"fixed64,3,opt,name=discount" json:"discount,omitempty"`
	TotalPriceWithDiscount float64 `protobuf:"fixed64,4,opt,name=totalPriceWithDiscount" json:"totalPriceWithDiscount,omitempty"`
}

func (m *PaymentRequest) Reset()                    { *m = PaymentRequest{} }
func (m *PaymentRequest) String() string            { return proto1.CompactTextString(m) }
func (*PaymentRequest) ProtoMessage()               {}
func (*PaymentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *PaymentRequest) GetPaymentId() uint64 {
	if m != nil {
		return m.PaymentId
	}
	return 0
}

func (m *PaymentRequest) GetTotalOrderPrice() float64 {
	if m != nil {
		return m.TotalOrderPrice
	}
	return 0
}

func (m *PaymentRequest) GetDiscount() float64 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *PaymentRequest) GetTotalPriceWithDiscount() float64 {
	if m != nil {
		return m.TotalPriceWithDiscount
	}
	return 0
}

type PaymentFilter struct {
	PaymentKeyword string `protobuf:"bytes,1,opt,name=paymentKeyword" json:"paymentKeyword,omitempty"`
}

func (m *PaymentFilter) Reset()                    { *m = PaymentFilter{} }
func (m *PaymentFilter) String() string            { return proto1.CompactTextString(m) }
func (*PaymentFilter) ProtoMessage()               {}
func (*PaymentFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *PaymentFilter) GetPaymentKeyword() string {
	if m != nil {
		return m.PaymentKeyword
	}
	return ""
}

type OrderDetailRequest struct {
	OrderDetailId   uint64  `protobuf:"varint,1,opt,name=orderDetailId" json:"orderDetailId,omitempty"`
	OrderId         uint64  `protobuf:"varint,2,opt,name=orderId" json:"orderId,omitempty"`
	OrderDetailDate uint64  `protobuf:"varint,3,opt,name=orderDetailDate" json:"orderDetailDate,omitempty"`
	IsLast          uint32  `protobuf:"varint,4,opt,name=isLast" json:"isLast,omitempty"`
	ProductId       uint64  `protobuf:"varint,5,opt,name=productId" json:"productId,omitempty"`
	BillingNo       string  `protobuf:"bytes,6,opt,name=billingNo" json:"billingNo,omitempty"`
	Price           float64 `protobuf:"fixed64,7,opt,name=price" json:"price,omitempty"`
	OrderQuantity   float64 `protobuf:"fixed64,8,opt,name=orderQuantity" json:"orderQuantity,omitempty"`
	Discount        int32   `protobuf:"varint,9,opt,name=discount" json:"discount,omitempty"`
}

func (m *OrderDetailRequest) Reset()                    { *m = OrderDetailRequest{} }
func (m *OrderDetailRequest) String() string            { return proto1.CompactTextString(m) }
func (*OrderDetailRequest) ProtoMessage()               {}
func (*OrderDetailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *OrderDetailRequest) GetOrderDetailId() uint64 {
	if m != nil {
		return m.OrderDetailId
	}
	return 0
}

func (m *OrderDetailRequest) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *OrderDetailRequest) GetOrderDetailDate() uint64 {
	if m != nil {
		return m.OrderDetailDate
	}
	return 0
}

func (m *OrderDetailRequest) GetIsLast() uint32 {
	if m != nil {
		return m.IsLast
	}
	return 0
}

func (m *OrderDetailRequest) GetProductId() uint64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *OrderDetailRequest) GetBillingNo() string {
	if m != nil {
		return m.BillingNo
	}
	return ""
}

func (m *OrderDetailRequest) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderDetailRequest) GetOrderQuantity() float64 {
	if m != nil {
		return m.OrderQuantity
	}
	return 0
}

func (m *OrderDetailRequest) GetDiscount() int32 {
	if m != nil {
		return m.Discount
	}
	return 0
}

type OrderDetailFilter struct {
	OrderDetailKeyword string `protobuf:"bytes,1,opt,name=orderDetailKeyword" json:"orderDetailKeyword,omitempty"`
	OrderDetailDate    uint64 `protobuf:"varint,2,opt,name=orderDetailDate" json:"orderDetailDate,omitempty"`
	Limit              uint32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	ProductId          uint64 `protobuf:"varint,4,opt,name=productId" json:"productId,omitempty"`
}

func (m *OrderDetailFilter) Reset()                    { *m = OrderDetailFilter{} }
func (m *OrderDetailFilter) String() string            { return proto1.CompactTextString(m) }
func (*OrderDetailFilter) ProtoMessage()               {}
func (*OrderDetailFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *OrderDetailFilter) GetOrderDetailKeyword() string {
	if m != nil {
		return m.OrderDetailKeyword
	}
	return ""
}

func (m *OrderDetailFilter) GetOrderDetailDate() uint64 {
	if m != nil {
		return m.OrderDetailDate
	}
	return 0
}

func (m *OrderDetailFilter) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *OrderDetailFilter) GetProductId() uint64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

type TransactionRequest struct {
	TransactionId     uint64  `protobuf:"varint,1,opt,name=transactionId" json:"transactionId,omitempty"`
	TransactionDate   uint64  `protobuf:"varint,2,opt,name=transactionDate" json:"transactionDate,omitempty"`
	IsLastTransaction uint32  `protobuf:"varint,3,opt,name=isLastTransaction" json:"isLastTransaction,omitempty"`
	TransactionType   uint32  `protobuf:"varint,4,opt,name=transactionType" json:"transactionType,omitempty"`
	MoneyAmount       float64 `protobuf:"fixed64,5,opt,name=moneyAmount" json:"moneyAmount,omitempty"`
	OrderId           uint64  `protobuf:"varint,6,opt,name=orderId" json:"orderId,omitempty"`
	CustomerId        uint64  `protobuf:"varint,7,opt,name=customerId" json:"customerId,omitempty"`
	SupplierId        uint64  `protobuf:"varint,8,opt,name=supplierId" json:"supplierId,omitempty"`
	StaffId           uint64  `protobuf:"varint,9,opt,name=staffId" json:"staffId,omitempty"`
	Comment           string  `protobuf:"bytes,10,opt,name=comment" json:"comment,omitempty"`
}

func (m *TransactionRequest) Reset()                    { *m = TransactionRequest{} }
func (m *TransactionRequest) String() string            { return proto1.CompactTextString(m) }
func (*TransactionRequest) ProtoMessage()               {}
func (*TransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *TransactionRequest) GetTransactionId() uint64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *TransactionRequest) GetTransactionDate() uint64 {
	if m != nil {
		return m.TransactionDate
	}
	return 0
}

func (m *TransactionRequest) GetIsLastTransaction() uint32 {
	if m != nil {
		return m.IsLastTransaction
	}
	return 0
}

func (m *TransactionRequest) GetTransactionType() uint32 {
	if m != nil {
		return m.TransactionType
	}
	return 0
}

func (m *TransactionRequest) GetMoneyAmount() float64 {
	if m != nil {
		return m.MoneyAmount
	}
	return 0
}

func (m *TransactionRequest) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *TransactionRequest) GetCustomerId() uint64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *TransactionRequest) GetSupplierId() uint64 {
	if m != nil {
		return m.SupplierId
	}
	return 0
}

func (m *TransactionRequest) GetStaffId() uint64 {
	if m != nil {
		return m.StaffId
	}
	return 0
}

func (m *TransactionRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type TransactionFilter struct {
	TransactionKeyword string `protobuf:"bytes,1,opt,name=transactionKeyword" json:"transactionKeyword,omitempty"`
	TransactionDate    uint64 `protobuf:"varint,2,opt,name=transactionDate" json:"transactionDate,omitempty"`
	Limit              uint32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	CustomerId         uint64 `protobuf:"varint,4,opt,name=customerId" json:"customerId,omitempty"`
	SupplierId         uint64 `protobuf:"varint,5,opt,name=supplierId" json:"supplierId,omitempty"`
}

func (m *TransactionFilter) Reset()                    { *m = TransactionFilter{} }
func (m *TransactionFilter) String() string            { return proto1.CompactTextString(m) }
func (*TransactionFilter) ProtoMessage()               {}
func (*TransactionFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *TransactionFilter) GetTransactionKeyword() string {
	if m != nil {
		return m.TransactionKeyword
	}
	return ""
}

func (m *TransactionFilter) GetTransactionDate() uint64 {
	if m != nil {
		return m.TransactionDate
	}
	return 0
}

func (m *TransactionFilter) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TransactionFilter) GetCustomerId() uint64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *TransactionFilter) GetSupplierId() uint64 {
	if m != nil {
		return m.SupplierId
	}
	return 0
}

type SignInRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *SignInRequest) Reset()                    { *m = SignInRequest{} }
func (m *SignInRequest) String() string            { return proto1.CompactTextString(m) }
func (*SignInRequest) ProtoMessage()               {}
func (*SignInRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *SignInRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SignInRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateOrderRequest struct {
	Order        *OrderRequest         `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
	Payment      *PaymentRequest       `protobuf:"bytes,2,opt,name=payment" json:"payment,omitempty"`
	Transaction  *TransactionRequest   `protobuf:"bytes,3,opt,name=transaction" json:"transaction,omitempty"`
	Account      *AccountRequest       `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
	OrderDetails []*OrderDetailRequest `protobuf:"bytes,5,rep,name=orderDetails" json:"orderDetails,omitempty"`
}

func (m *CreateOrderRequest) Reset()                    { *m = CreateOrderRequest{} }
func (m *CreateOrderRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateOrderRequest) ProtoMessage()               {}
func (*CreateOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *CreateOrderRequest) GetOrder() *OrderRequest {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *CreateOrderRequest) GetPayment() *PaymentRequest {
	if m != nil {
		return m.Payment
	}
	return nil
}

func (m *CreateOrderRequest) GetTransaction() *TransactionRequest {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *CreateOrderRequest) GetAccount() *AccountRequest {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *CreateOrderRequest) GetOrderDetails() []*OrderDetailRequest {
	if m != nil {
		return m.OrderDetails
	}
	return nil
}

func init() {
	proto1.RegisterType((*AllProductsResponse)(nil), "proto.AllProductsResponse")
	proto1.RegisterType((*AllCustomersResponse)(nil), "proto.AllCustomersResponse")
	proto1.RegisterType((*AllSuppliersResponse)(nil), "proto.AllSuppliersResponse")
	proto1.RegisterType((*AllStaffResponse)(nil), "proto.AllStaffResponse")
	proto1.RegisterType((*AllCategoryResponse)(nil), "proto.AllCategoryResponse")
	proto1.RegisterType((*AllOrderResponse)(nil), "proto.AllOrderResponse")
	proto1.RegisterType((*AllOrderDetailResponse)(nil), "proto.AllOrderDetailResponse")
	proto1.RegisterType((*AllTransactionResponse)(nil), "proto.AllTransactionResponse")
	proto1.RegisterType((*StickyNoteRequest)(nil), "proto.StickyNoteRequest")
	proto1.RegisterType((*StickyNoteResponse)(nil), "proto.StickyNoteResponse")
	proto1.RegisterType((*ExampleRequest)(nil), "proto.ExampleRequest")
	proto1.RegisterType((*ExampleRequest_Address)(nil), "proto.ExampleRequest.Address")
	proto1.RegisterType((*ExampleResponse)(nil), "proto.ExampleResponse")
	proto1.RegisterType((*ExampleFilter)(nil), "proto.ExampleFilter")
	proto1.RegisterType((*CreateProductRequest)(nil), "proto.CreateProductRequest")
	proto1.RegisterType((*CreateCustomerRequest)(nil), "proto.CreateCustomerRequest")
	proto1.RegisterType((*CreateSupplierRequest)(nil), "proto.CreateSupplierRequest")
	proto1.RegisterType((*StaffRequest)(nil), "proto.StaffRequest")
	proto1.RegisterType((*StaffFilter)(nil), "proto.StaffFilter")
	proto1.RegisterType((*RoleRequest)(nil), "proto.RoleRequest")
	proto1.RegisterType((*ProductRequest)(nil), "proto.ProductRequest")
	proto1.RegisterType((*ProductFilter)(nil), "proto.ProductFilter")
	proto1.RegisterType((*CategoryRequest)(nil), "proto.CategoryRequest")
	proto1.RegisterType((*CategoryFilter)(nil), "proto.CategoryFilter")
	proto1.RegisterType((*CustomerRequest)(nil), "proto.CustomerRequest")
	proto1.RegisterType((*CustomerFilter)(nil), "proto.CustomerFilter")
	proto1.RegisterType((*SupplierRequest)(nil), "proto.SupplierRequest")
	proto1.RegisterType((*SupplierFilter)(nil), "proto.SupplierFilter")
	proto1.RegisterType((*AccountRequest)(nil), "proto.AccountRequest")
	proto1.RegisterType((*AccountFilter)(nil), "proto.AccountFilter")
	proto1.RegisterType((*OrderRequest)(nil), "proto.OrderRequest")
	proto1.RegisterType((*OrderFilter)(nil), "proto.OrderFilter")
	proto1.RegisterType((*PaymentRequest)(nil), "proto.PaymentRequest")
	proto1.RegisterType((*PaymentFilter)(nil), "proto.PaymentFilter")
	proto1.RegisterType((*OrderDetailRequest)(nil), "proto.OrderDetailRequest")
	proto1.RegisterType((*OrderDetailFilter)(nil), "proto.OrderDetailFilter")
	proto1.RegisterType((*TransactionRequest)(nil), "proto.TransactionRequest")
	proto1.RegisterType((*TransactionFilter)(nil), "proto.TransactionFilter")
	proto1.RegisterType((*SignInRequest)(nil), "proto.SignInRequest")
	proto1.RegisterType((*CreateOrderRequest)(nil), "proto.CreateOrderRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RentautomationService service

type RentautomationServiceClient interface {
	GetExamples(ctx context.Context, in *ExampleFilter, opts ...grpc.CallOption) (RentautomationService_GetExamplesClient, error)
	CreateExample(ctx context.Context, in *ExampleRequest, opts ...grpc.CallOption) (*ExampleResponse, error)
	CreateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryRequest, error)
	UpdateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryRequest, error)
	AllCategoriesForInitial(ctx context.Context, in *CategoryFilter, opts ...grpc.CallOption) (*AllCategoryResponse, error)
	CheckCategoriesForUpdate(ctx context.Context, in *CategoryFilter, opts ...grpc.CallOption) (*AllCategoryResponse, error)
	CreateProductWith(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductRequest, error)
	UpdateProductWith(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductRequest, error)
	AllProductsForInitial(ctx context.Context, in *ProductFilter, opts ...grpc.CallOption) (*AllProductsResponse, error)
	CheckProductsForUpdate(ctx context.Context, in *ProductFilter, opts ...grpc.CallOption) (*AllProductsResponse, error)
	CheckOrderDetailsForUpdate(ctx context.Context, in *OrderDetailFilter, opts ...grpc.CallOption) (*AllOrderDetailResponse, error)
	AllOrderDetails(ctx context.Context, in *OrderDetailFilter, opts ...grpc.CallOption) (*AllOrderDetailResponse, error)
	CreateCustomerWith(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerRequest, error)
	UpdateCustomerWith(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerRequest, error)
	UpdateCustomerBalanceWith(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerRequest, error)
	AllCustomersForInitial(ctx context.Context, in *CustomerFilter, opts ...grpc.CallOption) (*AllCustomersResponse, error)
	CheckCustomersForUpdate(ctx context.Context, in *CustomerFilter, opts ...grpc.CallOption) (*AllCustomersResponse, error)
	CreateSupplierWith(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierRequest, error)
	UpdateSupplierWith(ctx context.Context, in *SupplierRequest, opts ...grpc.CallOption) (*SupplierRequest, error)
	UpdateSupplierBalanceWith(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierRequest, error)
	AllSuppliersForInitial(ctx context.Context, in *SupplierFilter, opts ...grpc.CallOption) (*AllSuppliersResponse, error)
	CheckSuppliersForUpdate(ctx context.Context, in *SupplierFilter, opts ...grpc.CallOption) (*AllSuppliersResponse, error)
	CheckTransactionsForUpdate(ctx context.Context, in *TransactionFilter, opts ...grpc.CallOption) (*AllTransactionResponse, error)
	UpdateTransactionWith(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionRequest, error)
	AllTransactionsForInitial(ctx context.Context, in *TransactionFilter, opts ...grpc.CallOption) (*AllTransactionResponse, error)
	CreateStaffWith(ctx context.Context, in *StaffRequest, opts ...grpc.CallOption) (*StaffRequest, error)
	UpdateStaffWith(ctx context.Context, in *StaffRequest, opts ...grpc.CallOption) (*StaffRequest, error)
	AllStaffForInitial(ctx context.Context, in *StaffFilter, opts ...grpc.CallOption) (*AllStaffResponse, error)
	CheckStaffForUpdate(ctx context.Context, in *StaffFilter, opts ...grpc.CallOption) (*AllStaffResponse, error)
	SignInWith(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*StaffRequest, error)
	CreateOrderWith(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderRequest, error)
	UpdateOrderWith(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderRequest, error)
	AllOrdersForInitial(ctx context.Context, in *OrderFilter, opts ...grpc.CallOption) (*AllOrderResponse, error)
	CheckOrdersForUpdate(ctx context.Context, in *OrderFilter, opts ...grpc.CallOption) (*AllOrderResponse, error)
	UpdateStream(ctx context.Context, opts ...grpc.CallOption) (RentautomationService_UpdateStreamClient, error)
}

type rentautomationServiceClient struct {
	cc *grpc.ClientConn
}

func NewRentautomationServiceClient(cc *grpc.ClientConn) RentautomationServiceClient {
	return &rentautomationServiceClient{cc}
}

func (c *rentautomationServiceClient) GetExamples(ctx context.Context, in *ExampleFilter, opts ...grpc.CallOption) (RentautomationService_GetExamplesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RentautomationService_serviceDesc.Streams[0], c.cc, "/proto.RentautomationService/GetExamples", opts...)
	if err != nil {
		return nil, err
	}
	x := &rentautomationServiceGetExamplesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RentautomationService_GetExamplesClient interface {
	Recv() (*ExampleRequest, error)
	grpc.ClientStream
}

type rentautomationServiceGetExamplesClient struct {
	grpc.ClientStream
}

func (x *rentautomationServiceGetExamplesClient) Recv() (*ExampleRequest, error) {
	m := new(ExampleRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rentautomationServiceClient) CreateExample(ctx context.Context, in *ExampleRequest, opts ...grpc.CallOption) (*ExampleResponse, error) {
	out := new(ExampleResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CreateExample", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CreateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryRequest, error) {
	out := new(CategoryRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CreateCategory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) UpdateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryRequest, error) {
	out := new(CategoryRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/UpdateCategory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) AllCategoriesForInitial(ctx context.Context, in *CategoryFilter, opts ...grpc.CallOption) (*AllCategoryResponse, error) {
	out := new(AllCategoryResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/AllCategoriesForInitial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CheckCategoriesForUpdate(ctx context.Context, in *CategoryFilter, opts ...grpc.CallOption) (*AllCategoryResponse, error) {
	out := new(AllCategoryResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CheckCategoriesForUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CreateProductWith(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductRequest, error) {
	out := new(CreateProductRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CreateProductWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) UpdateProductWith(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductRequest, error) {
	out := new(CreateProductRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/UpdateProductWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) AllProductsForInitial(ctx context.Context, in *ProductFilter, opts ...grpc.CallOption) (*AllProductsResponse, error) {
	out := new(AllProductsResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/AllProductsForInitial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CheckProductsForUpdate(ctx context.Context, in *ProductFilter, opts ...grpc.CallOption) (*AllProductsResponse, error) {
	out := new(AllProductsResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CheckProductsForUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CheckOrderDetailsForUpdate(ctx context.Context, in *OrderDetailFilter, opts ...grpc.CallOption) (*AllOrderDetailResponse, error) {
	out := new(AllOrderDetailResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CheckOrderDetailsForUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) AllOrderDetails(ctx context.Context, in *OrderDetailFilter, opts ...grpc.CallOption) (*AllOrderDetailResponse, error) {
	out := new(AllOrderDetailResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/AllOrderDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CreateCustomerWith(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerRequest, error) {
	out := new(CreateCustomerRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CreateCustomerWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) UpdateCustomerWith(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerRequest, error) {
	out := new(CustomerRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/UpdateCustomerWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) UpdateCustomerBalanceWith(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerRequest, error) {
	out := new(CreateCustomerRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/UpdateCustomerBalanceWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) AllCustomersForInitial(ctx context.Context, in *CustomerFilter, opts ...grpc.CallOption) (*AllCustomersResponse, error) {
	out := new(AllCustomersResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/AllCustomersForInitial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CheckCustomersForUpdate(ctx context.Context, in *CustomerFilter, opts ...grpc.CallOption) (*AllCustomersResponse, error) {
	out := new(AllCustomersResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CheckCustomersForUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CreateSupplierWith(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierRequest, error) {
	out := new(CreateSupplierRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CreateSupplierWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) UpdateSupplierWith(ctx context.Context, in *SupplierRequest, opts ...grpc.CallOption) (*SupplierRequest, error) {
	out := new(SupplierRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/UpdateSupplierWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) UpdateSupplierBalanceWith(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierRequest, error) {
	out := new(CreateSupplierRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/UpdateSupplierBalanceWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) AllSuppliersForInitial(ctx context.Context, in *SupplierFilter, opts ...grpc.CallOption) (*AllSuppliersResponse, error) {
	out := new(AllSuppliersResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/AllSuppliersForInitial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CheckSuppliersForUpdate(ctx context.Context, in *SupplierFilter, opts ...grpc.CallOption) (*AllSuppliersResponse, error) {
	out := new(AllSuppliersResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CheckSuppliersForUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CheckTransactionsForUpdate(ctx context.Context, in *TransactionFilter, opts ...grpc.CallOption) (*AllTransactionResponse, error) {
	out := new(AllTransactionResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CheckTransactionsForUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) UpdateTransactionWith(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionRequest, error) {
	out := new(TransactionRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/UpdateTransactionWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) AllTransactionsForInitial(ctx context.Context, in *TransactionFilter, opts ...grpc.CallOption) (*AllTransactionResponse, error) {
	out := new(AllTransactionResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/AllTransactionsForInitial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CreateStaffWith(ctx context.Context, in *StaffRequest, opts ...grpc.CallOption) (*StaffRequest, error) {
	out := new(StaffRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CreateStaffWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) UpdateStaffWith(ctx context.Context, in *StaffRequest, opts ...grpc.CallOption) (*StaffRequest, error) {
	out := new(StaffRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/UpdateStaffWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) AllStaffForInitial(ctx context.Context, in *StaffFilter, opts ...grpc.CallOption) (*AllStaffResponse, error) {
	out := new(AllStaffResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/AllStaffForInitial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CheckStaffForUpdate(ctx context.Context, in *StaffFilter, opts ...grpc.CallOption) (*AllStaffResponse, error) {
	out := new(AllStaffResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CheckStaffForUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) SignInWith(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*StaffRequest, error) {
	out := new(StaffRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/SignInWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CreateOrderWith(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderRequest, error) {
	out := new(CreateOrderRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CreateOrderWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) UpdateOrderWith(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderRequest, error) {
	out := new(OrderRequest)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/UpdateOrderWith", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) AllOrdersForInitial(ctx context.Context, in *OrderFilter, opts ...grpc.CallOption) (*AllOrderResponse, error) {
	out := new(AllOrderResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/AllOrdersForInitial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) CheckOrdersForUpdate(ctx context.Context, in *OrderFilter, opts ...grpc.CallOption) (*AllOrderResponse, error) {
	out := new(AllOrderResponse)
	err := grpc.Invoke(ctx, "/proto.RentautomationService/CheckOrdersForUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentautomationServiceClient) UpdateStream(ctx context.Context, opts ...grpc.CallOption) (RentautomationService_UpdateStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RentautomationService_serviceDesc.Streams[1], c.cc, "/proto.RentautomationService/UpdateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &rentautomationServiceUpdateStreamClient{stream}
	return x, nil
}

type RentautomationService_UpdateStreamClient interface {
	Send(*StickyNoteRequest) error
	Recv() (*StickyNoteResponse, error)
	grpc.ClientStream
}

type rentautomationServiceUpdateStreamClient struct {
	grpc.ClientStream
}

func (x *rentautomationServiceUpdateStreamClient) Send(m *StickyNoteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rentautomationServiceUpdateStreamClient) Recv() (*StickyNoteResponse, error) {
	m := new(StickyNoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RentautomationService service

type RentautomationServiceServer interface {
	GetExamples(*ExampleFilter, RentautomationService_GetExamplesServer) error
	CreateExample(context.Context, *ExampleRequest) (*ExampleResponse, error)
	CreateCategory(context.Context, *CategoryRequest) (*CategoryRequest, error)
	UpdateCategory(context.Context, *CategoryRequest) (*CategoryRequest, error)
	AllCategoriesForInitial(context.Context, *CategoryFilter) (*AllCategoryResponse, error)
	CheckCategoriesForUpdate(context.Context, *CategoryFilter) (*AllCategoryResponse, error)
	CreateProductWith(context.Context, *CreateProductRequest) (*CreateProductRequest, error)
	UpdateProductWith(context.Context, *CreateProductRequest) (*CreateProductRequest, error)
	AllProductsForInitial(context.Context, *ProductFilter) (*AllProductsResponse, error)
	CheckProductsForUpdate(context.Context, *ProductFilter) (*AllProductsResponse, error)
	CheckOrderDetailsForUpdate(context.Context, *OrderDetailFilter) (*AllOrderDetailResponse, error)
	AllOrderDetails(context.Context, *OrderDetailFilter) (*AllOrderDetailResponse, error)
	CreateCustomerWith(context.Context, *CreateCustomerRequest) (*CreateCustomerRequest, error)
	UpdateCustomerWith(context.Context, *CustomerRequest) (*CustomerRequest, error)
	UpdateCustomerBalanceWith(context.Context, *CreateCustomerRequest) (*CreateCustomerRequest, error)
	AllCustomersForInitial(context.Context, *CustomerFilter) (*AllCustomersResponse, error)
	CheckCustomersForUpdate(context.Context, *CustomerFilter) (*AllCustomersResponse, error)
	CreateSupplierWith(context.Context, *CreateSupplierRequest) (*CreateSupplierRequest, error)
	UpdateSupplierWith(context.Context, *SupplierRequest) (*SupplierRequest, error)
	UpdateSupplierBalanceWith(context.Context, *CreateSupplierRequest) (*CreateSupplierRequest, error)
	AllSuppliersForInitial(context.Context, *SupplierFilter) (*AllSuppliersResponse, error)
	CheckSuppliersForUpdate(context.Context, *SupplierFilter) (*AllSuppliersResponse, error)
	CheckTransactionsForUpdate(context.Context, *TransactionFilter) (*AllTransactionResponse, error)
	UpdateTransactionWith(context.Context, *TransactionRequest) (*TransactionRequest, error)
	AllTransactionsForInitial(context.Context, *TransactionFilter) (*AllTransactionResponse, error)
	CreateStaffWith(context.Context, *StaffRequest) (*StaffRequest, error)
	UpdateStaffWith(context.Context, *StaffRequest) (*StaffRequest, error)
	AllStaffForInitial(context.Context, *StaffFilter) (*AllStaffResponse, error)
	CheckStaffForUpdate(context.Context, *StaffFilter) (*AllStaffResponse, error)
	SignInWith(context.Context, *SignInRequest) (*StaffRequest, error)
	CreateOrderWith(context.Context, *CreateOrderRequest) (*CreateOrderRequest, error)
	UpdateOrderWith(context.Context, *OrderRequest) (*OrderRequest, error)
	AllOrdersForInitial(context.Context, *OrderFilter) (*AllOrderResponse, error)
	CheckOrdersForUpdate(context.Context, *OrderFilter) (*AllOrderResponse, error)
	UpdateStream(RentautomationService_UpdateStreamServer) error
}

func RegisterRentautomationServiceServer(s *grpc.Server, srv RentautomationServiceServer) {
	s.RegisterService(&_RentautomationService_serviceDesc, srv)
}

func _RentautomationService_GetExamples_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExampleFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RentautomationServiceServer).GetExamples(m, &rentautomationServiceGetExamplesServer{stream})
}

type RentautomationService_GetExamplesServer interface {
	Send(*ExampleRequest) error
	grpc.ServerStream
}

type rentautomationServiceGetExamplesServer struct {
	grpc.ServerStream
}

func (x *rentautomationServiceGetExamplesServer) Send(m *ExampleRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _RentautomationService_CreateExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CreateExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CreateExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CreateExample(ctx, req.(*ExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CreateCategory(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).UpdateCategory(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_AllCategoriesForInitial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).AllCategoriesForInitial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/AllCategoriesForInitial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).AllCategoriesForInitial(ctx, req.(*CategoryFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CheckCategoriesForUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CheckCategoriesForUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CheckCategoriesForUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CheckCategoriesForUpdate(ctx, req.(*CategoryFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CreateProductWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CreateProductWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CreateProductWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CreateProductWith(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_UpdateProductWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).UpdateProductWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/UpdateProductWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).UpdateProductWith(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_AllProductsForInitial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).AllProductsForInitial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/AllProductsForInitial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).AllProductsForInitial(ctx, req.(*ProductFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CheckProductsForUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CheckProductsForUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CheckProductsForUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CheckProductsForUpdate(ctx, req.(*ProductFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CheckOrderDetailsForUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDetailFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CheckOrderDetailsForUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CheckOrderDetailsForUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CheckOrderDetailsForUpdate(ctx, req.(*OrderDetailFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_AllOrderDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDetailFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).AllOrderDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/AllOrderDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).AllOrderDetails(ctx, req.(*OrderDetailFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CreateCustomerWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CreateCustomerWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CreateCustomerWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CreateCustomerWith(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_UpdateCustomerWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).UpdateCustomerWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/UpdateCustomerWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).UpdateCustomerWith(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_UpdateCustomerBalanceWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).UpdateCustomerBalanceWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/UpdateCustomerBalanceWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).UpdateCustomerBalanceWith(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_AllCustomersForInitial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).AllCustomersForInitial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/AllCustomersForInitial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).AllCustomersForInitial(ctx, req.(*CustomerFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CheckCustomersForUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CheckCustomersForUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CheckCustomersForUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CheckCustomersForUpdate(ctx, req.(*CustomerFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CreateSupplierWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CreateSupplierWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CreateSupplierWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CreateSupplierWith(ctx, req.(*CreateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_UpdateSupplierWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).UpdateSupplierWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/UpdateSupplierWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).UpdateSupplierWith(ctx, req.(*SupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_UpdateSupplierBalanceWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).UpdateSupplierBalanceWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/UpdateSupplierBalanceWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).UpdateSupplierBalanceWith(ctx, req.(*CreateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_AllSuppliersForInitial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).AllSuppliersForInitial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/AllSuppliersForInitial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).AllSuppliersForInitial(ctx, req.(*SupplierFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CheckSuppliersForUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplierFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CheckSuppliersForUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CheckSuppliersForUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CheckSuppliersForUpdate(ctx, req.(*SupplierFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CheckTransactionsForUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CheckTransactionsForUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CheckTransactionsForUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CheckTransactionsForUpdate(ctx, req.(*TransactionFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_UpdateTransactionWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).UpdateTransactionWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/UpdateTransactionWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).UpdateTransactionWith(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_AllTransactionsForInitial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).AllTransactionsForInitial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/AllTransactionsForInitial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).AllTransactionsForInitial(ctx, req.(*TransactionFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CreateStaffWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CreateStaffWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CreateStaffWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CreateStaffWith(ctx, req.(*StaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_UpdateStaffWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).UpdateStaffWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/UpdateStaffWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).UpdateStaffWith(ctx, req.(*StaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_AllStaffForInitial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).AllStaffForInitial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/AllStaffForInitial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).AllStaffForInitial(ctx, req.(*StaffFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CheckStaffForUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CheckStaffForUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CheckStaffForUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CheckStaffForUpdate(ctx, req.(*StaffFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_SignInWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).SignInWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/SignInWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).SignInWith(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CreateOrderWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CreateOrderWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CreateOrderWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CreateOrderWith(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_UpdateOrderWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).UpdateOrderWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/UpdateOrderWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).UpdateOrderWith(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_AllOrdersForInitial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).AllOrdersForInitial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/AllOrdersForInitial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).AllOrdersForInitial(ctx, req.(*OrderFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_CheckOrdersForUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentautomationServiceServer).CheckOrdersForUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RentautomationService/CheckOrdersForUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentautomationServiceServer).CheckOrdersForUpdate(ctx, req.(*OrderFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentautomationService_UpdateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RentautomationServiceServer).UpdateStream(&rentautomationServiceUpdateStreamServer{stream})
}

type RentautomationService_UpdateStreamServer interface {
	Send(*StickyNoteResponse) error
	Recv() (*StickyNoteRequest, error)
	grpc.ServerStream
}

type rentautomationServiceUpdateStreamServer struct {
	grpc.ServerStream
}

func (x *rentautomationServiceUpdateStreamServer) Send(m *StickyNoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rentautomationServiceUpdateStreamServer) Recv() (*StickyNoteRequest, error) {
	m := new(StickyNoteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RentautomationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RentautomationService",
	HandlerType: (*RentautomationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExample",
			Handler:    _RentautomationService_CreateExample_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _RentautomationService_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _RentautomationService_UpdateCategory_Handler,
		},
		{
			MethodName: "AllCategoriesForInitial",
			Handler:    _RentautomationService_AllCategoriesForInitial_Handler,
		},
		{
			MethodName: "CheckCategoriesForUpdate",
			Handler:    _RentautomationService_CheckCategoriesForUpdate_Handler,
		},
		{
			MethodName: "CreateProductWith",
			Handler:    _RentautomationService_CreateProductWith_Handler,
		},
		{
			MethodName: "UpdateProductWith",
			Handler:    _RentautomationService_UpdateProductWith_Handler,
		},
		{
			MethodName: "AllProductsForInitial",
			Handler:    _RentautomationService_AllProductsForInitial_Handler,
		},
		{
			MethodName: "CheckProductsForUpdate",
			Handler:    _RentautomationService_CheckProductsForUpdate_Handler,
		},
		{
			MethodName: "CheckOrderDetailsForUpdate",
			Handler:    _RentautomationService_CheckOrderDetailsForUpdate_Handler,
		},
		{
			MethodName: "AllOrderDetails",
			Handler:    _RentautomationService_AllOrderDetails_Handler,
		},
		{
			MethodName: "CreateCustomerWith",
			Handler:    _RentautomationService_CreateCustomerWith_Handler,
		},
		{
			MethodName: "UpdateCustomerWith",
			Handler:    _RentautomationService_UpdateCustomerWith_Handler,
		},
		{
			MethodName: "UpdateCustomerBalanceWith",
			Handler:    _RentautomationService_UpdateCustomerBalanceWith_Handler,
		},
		{
			MethodName: "AllCustomersForInitial",
			Handler:    _RentautomationService_AllCustomersForInitial_Handler,
		},
		{
			MethodName: "CheckCustomersForUpdate",
			Handler:    _RentautomationService_CheckCustomersForUpdate_Handler,
		},
		{
			MethodName: "CreateSupplierWith",
			Handler:    _RentautomationService_CreateSupplierWith_Handler,
		},
		{
			MethodName: "UpdateSupplierWith",
			Handler:    _RentautomationService_UpdateSupplierWith_Handler,
		},
		{
			MethodName: "UpdateSupplierBalanceWith",
			Handler:    _RentautomationService_UpdateSupplierBalanceWith_Handler,
		},
		{
			MethodName: "AllSuppliersForInitial",
			Handler:    _RentautomationService_AllSuppliersForInitial_Handler,
		},
		{
			MethodName: "CheckSuppliersForUpdate",
			Handler:    _RentautomationService_CheckSuppliersForUpdate_Handler,
		},
		{
			MethodName: "CheckTransactionsForUpdate",
			Handler:    _RentautomationService_CheckTransactionsForUpdate_Handler,
		},
		{
			MethodName: "UpdateTransactionWith",
			Handler:    _RentautomationService_UpdateTransactionWith_Handler,
		},
		{
			MethodName: "AllTransactionsForInitial",
			Handler:    _RentautomationService_AllTransactionsForInitial_Handler,
		},
		{
			MethodName: "CreateStaffWith",
			Handler:    _RentautomationService_CreateStaffWith_Handler,
		},
		{
			MethodName: "UpdateStaffWith",
			Handler:    _RentautomationService_UpdateStaffWith_Handler,
		},
		{
			MethodName: "AllStaffForInitial",
			Handler:    _RentautomationService_AllStaffForInitial_Handler,
		},
		{
			MethodName: "CheckStaffForUpdate",
			Handler:    _RentautomationService_CheckStaffForUpdate_Handler,
		},
		{
			MethodName: "SignInWith",
			Handler:    _RentautomationService_SignInWith_Handler,
		},
		{
			MethodName: "CreateOrderWith",
			Handler:    _RentautomationService_CreateOrderWith_Handler,
		},
		{
			MethodName: "UpdateOrderWith",
			Handler:    _RentautomationService_UpdateOrderWith_Handler,
		},
		{
			MethodName: "AllOrdersForInitial",
			Handler:    _RentautomationService_AllOrdersForInitial_Handler,
		},
		{
			MethodName: "CheckOrdersForUpdate",
			Handler:    _RentautomationService_CheckOrdersForUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetExamples",
			Handler:       _RentautomationService_GetExamples_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateStream",
			Handler:       _RentautomationService_UpdateStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "customer.proto",
}

func init() { proto1.RegisterFile("customer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x5a, 0x5f, 0x6f, 0x1b, 0xb9,
	0x11, 0xd7, 0xae, 0x24, 0xdb, 0x1a, 0xd9, 0x52, 0xcc, 0xd8, 0x8e, 0xa2, 0xe6, 0x0a, 0x83, 0x28,
	0x0e, 0xbe, 0xe2, 0x90, 0x1e, 0x52, 0xa0, 0x87, 0x22, 0xb8, 0xe2, 0x7c, 0x76, 0x5c, 0x08, 0xb9,
	0x73, 0x9c, 0x75, 0xae, 0xc1, 0xf5, 0xa1, 0xc0, 0x66, 0x97, 0xb1, 0x17, 0x91, 0x76, 0x75, 0xbb,
	0xd4, 0xb5, 0xea, 0x6b, 0xfb, 0x50, 0xa0, 0x0f, 0xfd, 0x04, 0x05, 0x7a, 0xaf, 0x6d, 0xbf, 0x40,
	0x81, 0xbe, 0xf5, 0x8b, 0xf4, 0x03, 0xf4, 0x33, 0x14, 0x05, 0x87, 0xe4, 0x2e, 0xc9, 0x5d, 0x29,
	0xe7, 0x24, 0xe8, 0x93, 0xc5, 0xdf, 0xcc, 0x0e, 0x87, 0xf3, 0x8f, 0xe4, 0xd0, 0x30, 0x88, 0x16,
	0x05, 0xcf, 0x66, 0x2c, 0xbf, 0x3f, 0xcf, 0x33, 0x9e, 0x91, 0x2e, 0xfe, 0xa1, 0xbf, 0x84, 0xdb,
	0xc7, 0xd3, 0xe9, 0x45, 0x9e, 0xc5, 0x8b, 0x88, 0x17, 0x01, 0x2b, 0xe6, 0x59, 0x5a, 0x30, 0x72,
	0x02, 0x83, 0xb9, 0xc4, 0x02, 0xf6, 0xf5, 0x82, 0x15, 0x7c, 0xe4, 0x1d, 0xb6, 0x8f, 0xfa, 0x0f,
	0xbe, 0x27, 0xbf, 0xbe, 0x7f, 0x92, 0xb3, 0x90, 0xb3, 0x0b, 0x8b, 0x25, 0x70, 0x3e, 0xa1, 0xbf,
	0x82, 0xbd, 0xe3, 0xe9, 0xf4, 0x44, 0xcd, 0x5b, 0x09, 0x3f, 0x83, 0xa1, 0x56, 0xc6, 0x96, 0x7e,
	0xcf, 0x92, 0x7e, 0x62, 0xf3, 0x04, 0xee, 0x47, 0x4a, 0xfe, 0xe5, 0x62, 0x3e, 0x9f, 0x26, 0x8e,
	0xfc, 0x42, 0x81, 0xeb, 0xe4, 0x5f, 0xda, 0x3c, 0x81, 0xfb, 0x11, 0x7d, 0x0c, 0xb7, 0x84, 0x7c,
	0x1e, 0xbe, 0x7c, 0x59, 0xca, 0xfe, 0x18, 0xb6, 0x0b, 0x09, 0x98, 0x82, 0x6f, 0x2b, 0xc1, 0x97,
	0x06, 0x29, 0xb0, 0x18, 0xe9, 0x73, 0x34, 0xf4, 0x49, 0xc8, 0xd9, 0x55, 0x96, 0x2f, 0x4b, 0x79,
	0x9f, 0xc2, 0x30, 0x2a, 0x31, 0x53, 0xe4, 0x81, 0xd6, 0xd5, 0xa6, 0x06, 0x2e, 0x3b, 0x7d, 0x8a,
	0x5a, 0x3e, 0xc9, 0x63, 0xa1, 0xb8, 0x92, 0xfa, 0x09, 0x6c, 0x67, 0x12, 0x30, 0x45, 0xde, 0xb5,
	0x96, 0xff, 0xc4, 0x60, 0x08, 0x2c, 0x76, 0x1a, 0xc1, 0x81, 0x16, 0x79, 0xca, 0x78, 0x98, 0x4c,
	0x4b, 0xc1, 0x13, 0x20, 0x99, 0x09, 0x37, 0x89, 0x7f, 0x52, 0x63, 0x08, 0x1a, 0x3e, 0x52, 0x93,
	0x3c, 0xcb, 0xc3, 0xb4, 0x08, 0x23, 0x9e, 0x64, 0xa9, 0x39, 0x09, 0x37, 0xe1, 0xa6, 0x49, 0x9e,
	0xd5, 0x18, 0x82, 0x86, 0x8f, 0xe8, 0x53, 0xd8, 0xbd, 0xe4, 0x49, 0xf4, 0x6a, 0x79, 0x9e, 0x71,
	0xa6, 0x40, 0x32, 0x82, 0xcd, 0x19, 0x2b, 0x8a, 0xf0, 0x8a, 0x8d, 0xbc, 0x43, 0xef, 0xa8, 0x17,
	0xe8, 0x21, 0xa1, 0xb0, 0x9d, 0x4b, 0xa6, 0xc9, 0x4c, 0x90, 0xfd, 0x43, 0xef, 0x68, 0x3b, 0xb0,
	0x30, 0xfa, 0x0c, 0x88, 0x29, 0x52, 0xe9, 0xbc, 0x5a, 0xe6, 0x0f, 0x60, 0x27, 0x57, 0x5c, 0xa6,
	0x50, 0x1b, 0xa4, 0x7f, 0xf3, 0x61, 0xf0, 0xe8, 0x37, 0xe1, 0x6c, 0x3e, 0x2d, 0xd5, 0x1c, 0x80,
	0x9f, 0xc4, 0x28, 0xad, 0x13, 0xf8, 0x49, 0x4c, 0x08, 0x74, 0xd2, 0x70, 0x26, 0xbf, 0xef, 0x05,
	0xf8, 0x9b, 0xec, 0x41, 0x97, 0xcd, 0xc2, 0x64, 0x3a, 0x6a, 0x23, 0x28, 0x07, 0x02, 0x9d, 0x5f,
	0x67, 0x29, 0x1b, 0x75, 0x24, 0x8a, 0x03, 0xf2, 0x10, 0x7a, 0x61, 0x1c, 0xe7, 0xac, 0x28, 0x58,
	0x31, 0xea, 0xa2, 0x35, 0xdf, 0x53, 0xd6, 0xb4, 0x67, 0xbe, 0x7f, 0x2c, 0xd9, 0x82, 0x8a, 0x7f,
	0xfc, 0x47, 0x0f, 0x36, 0x15, 0x4c, 0x0e, 0x60, 0xa3, 0xe0, 0x39, 0x63, 0x5c, 0x2d, 0x55, 0x8d,
	0x84, 0x82, 0x51, 0xc2, 0x97, 0x5a, 0x41, 0xf1, 0x5b, 0xa8, 0x52, 0xf0, 0x90, 0x33, 0xad, 0x20,
	0x0e, 0xc8, 0x2d, 0x68, 0xff, 0x36, 0x99, 0x2b, 0xf5, 0xc4, 0x4f, 0xf2, 0x21, 0xec, 0x26, 0xc5,
	0xe5, 0x75, 0x32, 0x9f, 0x27, 0xe9, 0x95, 0x9a, 0x68, 0xd4, 0x3d, 0xf4, 0x8e, 0xb6, 0x82, 0x3a,
	0x81, 0x3e, 0x84, 0x61, 0xa9, 0xb2, 0x72, 0x80, 0x6b, 0xad, 0x11, 0x6c, 0x16, 0x8b, 0x28, 0x12,
	0x62, 0x7c, 0x14, 0xa3, 0x87, 0xf4, 0x03, 0xd8, 0x51, 0x1f, 0x9f, 0x25, 0x53, 0xce, 0x72, 0xc1,
	0xfa, 0x8a, 0x2d, 0x7f, 0x9d, 0xe5, 0xb1, 0xf6, 0x9d, 0x1a, 0xd2, 0xdf, 0x7b, 0xb0, 0xd7, 0x54,
	0xea, 0xc8, 0x8f, 0x60, 0x53, 0x15, 0x3b, 0xfc, 0xa4, 0xff, 0x60, 0x5f, 0x59, 0xd2, 0x29, 0x89,
	0x9a, 0x8b, 0x3c, 0x84, 0xbe, 0x91, 0x03, 0xa8, 0xd2, 0xda, 0x8c, 0x31, 0xb9, 0xe9, 0x3f, 0x3c,
	0xd8, 0x6f, 0xac, 0x89, 0xe4, 0x01, 0x6c, 0xe9, 0xaa, 0xa8, 0x14, 0x29, 0xeb, 0x86, 0x53, 0x3d,
	0x4b, 0x3e, 0xa1, 0x8a, 0x91, 0x29, 0x8e, 0x2a, 0x0d, 0x79, 0x65, 0x72, 0x8b, 0x85, 0x87, 0x51,
	0x94, 0x2d, 0x52, 0x8e, 0x1e, 0xad, 0x16, 0x7e, 0x2c, 0xd1, 0x72, 0xe1, 0x8a, 0xcb, 0xd0, 0xdd,
	0xa9, 0xb7, 0x42, 0x77, 0x5d, 0x71, 0x1d, 0xdd, 0xdd, 0xca, 0x5c, 0xf2, 0xfd, 0x9f, 0x75, 0xff,
	0xa7, 0x0f, 0xdb, 0x66, 0x49, 0xc7, 0xa0, 0x12, 0xe3, 0x89, 0x8e, 0x34, 0x3d, 0x14, 0x39, 0x91,
	0x67, 0x53, 0x36, 0x89, 0x51, 0xa7, 0x4e, 0xa0, 0x46, 0xe4, 0x7d, 0x18, 0x48, 0x16, 0x91, 0xe5,
	0x17, 0x21, 0xbf, 0x56, 0x89, 0xe0, 0xa0, 0xe4, 0x1e, 0xf4, 0x5e, 0x26, 0x79, 0xc1, 0xcf, 0x45,
	0x86, 0xcb, 0xbc, 0xa8, 0x00, 0xf2, 0x7d, 0x80, 0x82, 0x45, 0x59, 0x1a, 0x23, 0xb9, 0x8b, 0x64,
	0x03, 0xa9, 0xca, 0xc0, 0x86, 0x59, 0x06, 0xc6, 0xb0, 0x35, 0x0f, 0x8b, 0x02, 0x03, 0x7b, 0x13,
	0x09, 0xe5, 0x98, 0x1c, 0x42, 0x1f, 0xab, 0xc2, 0xf9, 0x62, 0xf6, 0x82, 0xe5, 0xa3, 0x2d, 0x24,
	0x9b, 0x90, 0x58, 0xab, 0x4a, 0xff, 0x51, 0x4f, 0x66, 0x85, 0x1a, 0x96, 0x6b, 0xfa, 0x72, 0x1e,
	0x87, 0x9c, 0xc5, 0xc7, 0x7c, 0x04, 0xb8, 0x66, 0x07, 0xa5, 0x5f, 0x41, 0x1f, 0xad, 0xa7, 0xd2,
	0x8c, 0xaa, 0xad, 0xf3, 0xb1, 0x95, 0x6b, 0x16, 0xd6, 0x20, 0xda, 0x6f, 0x14, 0x7d, 0x0c, 0xfd,
	0x20, 0xab, 0x4a, 0x65, 0x65, 0x7d, 0xcf, 0xb2, 0xfe, 0x18, 0xb6, 0xc4, 0xaf, 0xf3, 0xaa, 0x6c,
	0x96, 0x63, 0xfa, 0x97, 0x36, 0x0c, 0x9c, 0xac, 0xbe, 0x07, 0x3d, 0x95, 0xaf, 0xa5, 0xa4, 0x0a,
	0x20, 0x3f, 0x84, 0x5b, 0x7a, 0x50, 0x3a, 0x53, 0x0a, 0xad, 0xe1, 0x68, 0x5e, 0x89, 0xe1, 0xdc,
	0x6d, 0x65, 0xde, 0x0a, 0x42, 0x97, 0xaa, 0xa8, 0x9e, 0xc4, 0xe8, 0xf1, 0x4e, 0x60, 0x20, 0x82,
	0xae, 0x77, 0xfa, 0x49, 0x8c, 0x2e, 0xef, 0x04, 0x06, 0x22, 0xdc, 0xf3, 0x22, 0xcc, 0xa3, 0x2c,
	0x66, 0xca, 0xe9, 0x7a, 0x48, 0x8e, 0x60, 0xf8, 0xf5, 0x22, 0x4c, 0x79, 0xc2, 0x97, 0x17, 0x2c,
	0xff, 0x32, 0x4d, 0xb8, 0xf2, 0xbe, 0x0b, 0x8b, 0xad, 0xa9, 0x08, 0xa7, 0x4c, 0xfc, 0xbe, 0xc8,
	0x93, 0x88, 0x61, 0x18, 0x78, 0x81, 0x0d, 0x0a, 0x79, 0x49, 0x1a, 0x65, 0x33, 0x83, 0xaf, 0x87,
	0x7c, 0x2e, 0x2c, 0x3c, 0xbc, 0x48, 0x13, 0x5e, 0x4c, 0xd2, 0x4b, 0x9e, 0x45, 0xaf, 0x30, 0x2c,
	0xbc, 0xc0, 0xc2, 0x0c, 0x2b, 0x56, 0x3e, 0xee, 0xe3, 0xea, 0x6a, 0x38, 0x8d, 0x60, 0x47, 0x79,
	0x48, 0x85, 0xd0, 0xfb, 0xe5, 0xb1, 0xd4, 0x0e, 0x22, 0x07, 0x6d, 0x9c, 0xc4, 0x5f, 0x31, 0xc9,
	0xef, 0x3c, 0x18, 0x3a, 0x87, 0x2c, 0xc7, 0xf8, 0x5e, 0xcd, 0xf8, 0x14, 0xb6, 0xf5, 0xc8, 0x88,
	0x2d, 0x0b, 0x13, 0x3b, 0x9a, 0x1e, 0x57, 0x4a, 0xb4, 0x51, 0x54, 0x9d, 0x40, 0xaf, 0x61, 0xa0,
	0x95, 0x50, 0x6b, 0x3d, 0xaa, 0x4e, 0x86, 0xf6, 0x62, 0x5d, 0xb8, 0x79, 0x26, 0x7f, 0xd5, 0x4c,
	0xdf, 0xfa, 0x30, 0x74, 0xb7, 0x11, 0xb1, 0x5e, 0x05, 0x19, 0xeb, 0x2d, 0x11, 0x9c, 0x41, 0x8f,
	0x9c, 0xd8, 0xaf, 0x13, 0xec, 0x5a, 0xd6, 0x5e, 0x5f, 0xcb, 0x3a, 0xb5, 0x5a, 0xe6, 0x54, 0xa6,
	0xee, 0xda, 0xca, 0xb4, 0x61, 0x57, 0x26, 0xa3, 0x3e, 0x6f, 0xda, 0xf5, 0xd9, 0x58, 0x41, 0x65,
	0xa3, 0x2d, 0x65, 0x23, 0x97, 0x80, 0xde, 0x50, 0xa0, 0xe1, 0x0d, 0x85, 0xb8, 0xde, 0xb0, 0xe1,
	0xe6, 0x99, 0xfc, 0x55, 0x33, 0xfd, 0xc9, 0x87, 0xa1, 0xbb, 0x31, 0xda, 0xa5, 0xc1, 0xab, 0x95,
	0x86, 0x0f, 0x61, 0xb7, 0x1c, 0xb9, 0xde, 0xa8, 0x11, 0x84, 0x3d, 0xa3, 0x6c, 0x36, 0x0f, 0xd3,
	0xa5, 0x59, 0x8a, 0x0c, 0x08, 0xa3, 0x39, 0x4b, 0x79, 0x18, 0xf1, 0xb3, 0xb4, 0xf2, 0x89, 0x85,
	0xbd, 0x95, 0x57, 0x0c, 0x7d, 0x2b, 0x8b, 0x48, 0xff, 0xd4, 0x09, 0xc2, 0xf6, 0xda, 0x20, 0x95,
	0xed, 0x35, 0x9b, 0x63, 0x7b, 0x07, 0x6e, 0x9e, 0xc9, 0x5f, 0x35, 0xd3, 0x1f, 0x3c, 0x18, 0xd8,
	0x5b, 0xbf, 0x08, 0x5d, 0xb5, 0xf9, 0x57, 0x3b, 0x40, 0x09, 0x38, 0x69, 0xe2, 0xd7, 0xd2, 0xc4,
	0x76, 0x5c, 0xbb, 0xe6, 0x38, 0xac, 0xd9, 0xd3, 0x30, 0x8d, 0xa4, 0x8d, 0xbd, 0x40, 0x0f, 0xe9,
	0xc7, 0xb0, 0xa3, 0x34, 0xa9, 0x2a, 0x9d, 0x9a, 0xd7, 0xa9, 0x74, 0x36, 0x4a, 0xff, 0xdd, 0x86,
	0x6d, 0xf3, 0x26, 0x27, 0xe6, 0xc0, 0xa3, 0x63, 0x75, 0x44, 0x51, 0x43, 0x51, 0xed, 0xe5, 0xa1,
	0x32, 0x8b, 0x16, 0x33, 0x96, 0x4a, 0xc3, 0xec, 0x04, 0x36, 0x28, 0x4c, 0x38, 0xcb, 0x52, 0xb6,
	0xfc, 0x22, 0xfb, 0x86, 0x09, 0xe0, 0xd9, 0x72, 0x2e, 0x83, 0x66, 0x27, 0xa8, 0x13, 0x84, 0xbd,
	0x5e, 0x24, 0xd3, 0x69, 0x92, 0x5e, 0x9d, 0x67, 0xfa, 0xd8, 0x52, 0x02, 0x66, 0x3a, 0x76, 0xed,
	0x74, 0xb4, 0x2d, 0xb9, 0xf1, 0x1a, 0x4b, 0x6e, 0xd6, 0x2c, 0x79, 0x0f, 0x7a, 0x52, 0x6d, 0x71,
	0xb5, 0x90, 0x69, 0x5c, 0x01, 0xb8, 0x8f, 0x87, 0x4b, 0xa1, 0xe4, 0x24, 0xc6, 0xbd, 0x4a, 0xec,
	0xe3, 0x1a, 0x10, 0x87, 0x02, 0x96, 0xe7, 0x59, 0xfe, 0x45, 0x71, 0x85, 0x3b, 0x54, 0x2f, 0x28,
	0xc7, 0x42, 0xe3, 0x28, 0x9b, 0xa1, 0x75, 0xfa, 0x32, 0x88, 0xd5, 0x50, 0xc8, 0x4c, 0x8a, 0x53,
	0x36, 0x65, 0x9c, 0xc5, 0xa3, 0x6d, 0xb4, 0x47, 0x05, 0x88, 0x03, 0x48, 0x52, 0x5c, 0x84, 0x49,
	0x3c, 0xda, 0x41, 0x92, 0x1a, 0x89, 0xb9, 0x92, 0xe2, 0x51, 0x9c, 0x88, 0x8f, 0x06, 0x48, 0x29,
	0xc7, 0xc2, 0xc5, 0xa8, 0x72, 0x15, 0xa9, 0x43, 0x79, 0xd6, 0xb1, 0x51, 0xca, 0xa0, 0x8f, 0x1e,
	0xae, 0x8e, 0x51, 0xc8, 0xe0, 0x1c, 0xa3, 0x4c, 0xcc, 0x36, 0x8f, 0xef, 0x9a, 0x67, 0x0f, 0xba,
	0xd3, 0x64, 0x96, 0x70, 0xe5, 0x56, 0x39, 0xa0, 0x7f, 0xf7, 0x60, 0x70, 0x21, 0x8d, 0x64, 0x9e,
	0x87, 0x4a, 0x3b, 0x7a, 0xae, 0x1d, 0x8f, 0x60, 0xc8, 0x33, 0x1e, 0xca, 0x3e, 0x81, 0x3c, 0x17,
	0xf8, 0xf2, 0x5c, 0xe0, 0xc0, 0xc2, 0x0a, 0x71, 0x52, 0x54, 0x27, 0x6f, 0x2f, 0x28, 0xc7, 0xe4,
	0x27, 0x70, 0x80, 0xec, 0xc8, 0xf9, 0x3c, 0xe1, 0xd7, 0xa7, 0x9a, 0x53, 0xa6, 0xc8, 0x0a, 0xaa,
	0xc8, 0x18, 0xa5, 0xad, 0x71, 0x36, 0x90, 0x80, 0x7b, 0x36, 0xb0, 0x50, 0xfa, 0x57, 0x1f, 0x48,
	0xfd, 0xc2, 0x55, 0x65, 0x07, 0xa2, 0xe5, 0x7a, 0x6d, 0xd0, 0xcc, 0x2e, 0xdf, 0xce, 0xae, 0x23,
	0x18, 0x1a, 0xac, 0xa7, 0xfa, 0xca, 0xdb, 0x09, 0x5c, 0x58, 0xc6, 0xca, 0xe7, 0x61, 0x21, 0x57,
	0x88, 0xb1, 0x22, 0x46, 0xf6, 0xe9, 0xb3, 0xeb, 0x9e, 0x3e, 0xad, 0x4c, 0xdb, 0x70, 0x33, 0x4d,
	0xdc, 0xf8, 0xd1, 0x03, 0x9b, 0x68, 0x34, 0x39, 0x28, 0xd7, 0xf4, 0x54, 0x9d, 0xfb, 0xf4, 0xf9,
	0xce, 0x02, 0x2d, 0xef, 0x88, 0x64, 0xe9, 0x56, 0xde, 0xa1, 0xdf, 0x7a, 0xb0, 0x6b, 0x18, 0x4b,
	0x99, 0xfa, 0xbe, 0xd5, 0x05, 0xb2, 0xcd, 0xdd, 0x40, 0x69, 0xb2, 0x8d, 0xdf, 0x6c, 0x9b, 0xc6,
	0xd0, 0xb4, 0x2d, 0xd3, 0x71, 0x2c, 0x43, 0xff, 0xe3, 0x03, 0xa9, 0x5f, 0xfd, 0xc4, 0xe2, 0x8d,
	0xcb, 0x5f, 0xe5, 0x50, 0x0b, 0xc4, 0x20, 0xae, 0x00, 0x53, 0x35, 0x07, 0x96, 0x1d, 0x0a, 0xe1,
	0x28, 0x63, 0x2e, 0x5d, 0x18, 0x6b, 0x04, 0x47, 0x2e, 0x16, 0x51, 0xe9, 0x6d, 0x17, 0x16, 0x3b,
	0x2b, 0xd6, 0xd5, 0xe3, 0x19, 0x7a, 0xa0, 0x8b, 0x2e, 0x32, 0x21, 0x33, 0xe8, 0x36, 0xec, 0xa0,
	0xb3, 0xcb, 0xe8, 0xe6, 0x6b, 0xca, 0xe8, 0x56, 0xd3, 0x86, 0xa4, 0x0b, 0x74, 0xcf, 0x2e, 0xd0,
	0x46, 0x21, 0x04, 0xab, 0x10, 0xd2, 0x7f, 0x79, 0xb0, 0x6b, 0xac, 0xb4, 0x0a, 0x09, 0x63, 0x61,
	0x4e, 0x48, 0xd4, 0x29, 0x37, 0xb0, 0x7b, 0x73, 0x48, 0xd8, 0x2b, 0xef, 0xbc, 0x66, 0xe5, 0x5d,
	0x77, 0xe5, 0xf4, 0x18, 0x76, 0x2e, 0x93, 0xab, 0x74, 0x52, 0x86, 0x4b, 0x79, 0x85, 0xf6, 0x56,
	0x5d, 0xa1, 0x7d, 0xfb, 0x0a, 0x4d, 0xff, 0xec, 0x03, 0xa9, 0xb7, 0x52, 0xc9, 0x07, 0xd0, 0x45,
	0xf7, 0xa8, 0x9e, 0xc6, 0x6d, 0xb3, 0xc7, 0xa3, 0x3b, 0x0c, 0x92, 0x03, 0xbb, 0x48, 0xb2, 0x38,
	0xa9, 0x4e, 0x46, 0xd9, 0x45, 0xb2, 0xea, 0x70, 0xa0, 0xb9, 0xdc, 0xf6, 0x47, 0xfb, 0x4d, 0xdb,
	0x1f, 0x9d, 0xef, 0xd2, 0xfe, 0x28, 0xbb, 0xc8, 0x32, 0x3f, 0x75, 0xcf, 0x70, 0x4d, 0xd3, 0xca,
	0x62, 0x7f, 0xf0, 0xdf, 0x3d, 0xd8, 0x0f, 0x58, 0xca, 0xc3, 0x05, 0xcf, 0x66, 0xa1, 0x50, 0xe1,
	0x92, 0xe5, 0xdf, 0x88, 0xba, 0xf4, 0x33, 0xe8, 0xff, 0x9c, 0x71, 0xd5, 0x84, 0x2b, 0xc8, 0x9e,
	0xdd, 0x85, 0x94, 0x11, 0x35, 0xde, 0x6f, 0xec, 0x4d, 0xd2, 0xd6, 0x47, 0x1e, 0xf9, 0x14, 0x76,
	0xa4, 0xe1, 0x15, 0x8d, 0x34, 0xf3, 0x8e, 0x0f, 0x5c, 0x58, 0xf6, 0x0a, 0x69, 0x8b, 0x7c, 0x06,
	0x03, 0xd5, 0x50, 0x53, 0xf7, 0x23, 0xb2, 0xa2, 0xdf, 0x3e, 0x5e, 0x81, 0x4b, 0x19, 0x72, 0x93,
	0x7e, 0x0b, 0x19, 0xe7, 0x70, 0xa7, 0x7a, 0x15, 0x48, 0x58, 0x71, 0x96, 0xe5, 0x93, 0x34, 0xe1,
	0x49, 0x38, 0x2d, 0xd7, 0x64, 0x5f, 0x0b, 0xc7, 0x63, 0xed, 0xb4, 0xfa, 0x63, 0x02, 0x6d, 0x91,
	0x27, 0x30, 0x3a, 0xb9, 0x66, 0xd1, 0x2b, 0x4b, 0xa2, 0xd4, 0xf2, 0x4d, 0x05, 0xee, 0x5a, 0x0d,
	0x50, 0xb1, 0x07, 0x93, 0x75, 0xaf, 0x40, 0xe3, 0x75, 0x44, 0x29, 0x50, 0xea, 0xf3, 0xae, 0x04,
	0x3e, 0x86, 0x7d, 0xe3, 0x05, 0xcb, 0x30, 0xe0, 0x9e, 0xdd, 0x92, 0xad, 0x2f, 0xd7, 0x7d, 0xf5,
	0xa2, 0x2d, 0xf2, 0x39, 0x1c, 0xa0, 0xfd, 0x0c, 0x71, 0xca, 0x7a, 0x6f, 0x22, 0xed, 0x39, 0x8c,
	0x51, 0x9a, 0x91, 0x2a, 0x86, 0xc4, 0x51, 0x3d, 0x91, 0x94, 0xd4, 0xf7, 0x2a, 0xa9, 0x0d, 0x8f,
	0x30, 0xa8, 0xe6, 0xd0, 0xa6, 0x15, 0x6f, 0x23, 0x2d, 0xd0, 0x75, 0x4c, 0xdf, 0x79, 0xd1, 0x27,
	0x6b, 0x1f, 0xe3, 0xc6, 0x6b, 0xa9, 0xb4, 0x45, 0xce, 0x80, 0xa8, 0xe4, 0x30, 0x65, 0xae, 0x68,
	0x4e, 0x8f, 0x57, 0xe0, 0xb4, 0x45, 0xbe, 0x82, 0xbb, 0xb6, 0x9c, 0xcf, 0xe4, 0x8d, 0xe9, 0x1d,
	0xa8, 0x78, 0x8e, 0x0f, 0x50, 0xe5, 0xf3, 0x64, 0x53, 0xea, 0x59, 0x3d, 0x80, 0x32, 0x10, 0x9b,
	0x1e, 0x35, 0x31, 0xb2, 0xef, 0xc8, 0xdc, 0x33, 0x24, 0xba, 0xa9, 0x77, 0x23, 0x81, 0xa5, 0x5f,
	0xf4, 0x7d, 0xb8, 0x61, 0xd1, 0x4e, 0xef, 0x60, 0xbc, 0x96, 0x6a, 0xfa, 0xc5, 0x92, 0xb9, 0xa2,
	0xf1, 0x3e, 0x5e, 0x81, 0x9b, 0x7e, 0xd1, 0xa4, 0xd5, 0x7e, 0xb9, 0xa9, 0x8a, 0xd2, 0x2f, 0xe5,
	0xb3, 0x6e, 0x83, 0x5f, 0xec, 0xfe, 0x80, 0x69, 0xc6, 0xda, 0x63, 0xb0, 0xe1, 0x17, 0x53, 0xa2,
	0xe3, 0x97, 0x9b, 0x09, 0xd4, 0x69, 0x6d, 0x6c, 0xb8, 0x0d, 0x69, 0x5d, 0x3b, 0x23, 0x99, 0x89,
	0xd8, 0xf0, 0xec, 0x89, 0x9a, 0xee, 0x4b, 0x21, 0x06, 0x19, 0x0d, 0xba, 0x7a, 0x8b, 0x1f, 0xaf,
	0x26, 0xd1, 0x16, 0xf9, 0x05, 0xdc, 0xb5, 0x27, 0x33, 0xad, 0xf9, 0x16, 0x8a, 0x7e, 0x02, 0x43,
	0xe5, 0x3d, 0x71, 0x5c, 0x44, 0x15, 0x9b, 0x9e, 0xc0, 0xc7, 0x4d, 0xa0, 0xfc, 0x5c, 0x05, 0xcf,
	0x1b, 0x7d, 0x7e, 0x02, 0x44, 0xbf, 0xcb, 0x1b, 0xcb, 0x21, 0x26, 0xb3, 0x5a, 0xc8, 0x1d, 0xc3,
	0x91, 0xe6, 0x33, 0x3e, 0x6d, 0x91, 0x53, 0xb8, 0x2d, 0xa3, 0x42, 0x89, 0x51, 0xde, 0xbb, 0xa1,
	0x94, 0x9f, 0x02, 0xc8, 0x63, 0x24, 0x2e, 0x42, 0xef, 0x11, 0xd6, 0xc9, 0x72, 0xd5, 0x2a, 0x26,
	0xda, 0x86, 0x58, 0x94, 0x2d, 0x37, 0xd7, 0x4f, 0x95, 0xe3, 0xd5, 0x24, 0xd3, 0x9e, 0x95, 0xa8,
	0xa6, 0x63, 0xe7, 0xb8, 0x09, 0x94, 0xa6, 0xd0, 0x7b, 0x43, 0xd1, 0x60, 0x50, 0xa3, 0xf9, 0x60,
	0x9a, 0xc2, 0xfa, 0x8f, 0x03, 0xda, 0x22, 0x8f, 0x60, 0xaf, 0xda, 0xec, 0x8a, 0xba, 0x45, 0xbf,
	0xa3, 0x98, 0x09, 0x6c, 0xeb, 0xd8, 0xc8, 0x59, 0x38, 0x2b, 0xa3, 0xb4, 0xf6, 0x8c, 0x5f, 0x9a,
	0xa4, 0xfe, 0x1a, 0x4f, 0x5b, 0x47, 0xde, 0x47, 0xde, 0x8b, 0x0d, 0xa4, 0xff, 0xf8, 0x7f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x28, 0xa5, 0xb8, 0x6d, 0xfb, 0x22, 0x00, 0x00,
}
